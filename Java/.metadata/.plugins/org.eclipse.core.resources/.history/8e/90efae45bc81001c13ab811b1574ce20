package com.test.algorithm;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayDeque;
import java.util.Queue;

public class Crash2_14442 {
	
	static int N,M,R;
	static int[][] map;
	static boolean[][][] visit;
	static int[] dr = {0,0,-1,1};
	static int[] dc = {1,-1,0,0};
	static int minDist = 0;
	
	static class Nods {
		int r,c,step;
		
		public Nods(int r, int c, int step) {
			this.r = r;
			this.c = c;
			this.step = step;
		}
	}
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		String[] inputs = br.readLine().split(" ");
		N = Integer.parseInt(inputs[0]);
		M = Integer.parseInt(inputs[1]);
		R = Integer.parseInt(inputs[2]);
		
		map = new int[N][M];
		visit = new boolean[N][M][R];
		
		for (int i = 0; i < N; i++) {
			String[] puts = br.readLine().split(" ");
 			for (int j= 0 ;j < M; j++) {
				map[i][j] = Integer.parseInt(puts[j]);
			}
		}
		
		
	}
	
	static int bfs() {
		
		Nods nd = new Nods(0,0,0);
		Queue<Nods> queue = new ArrayDeque<>(); 
		queue.offer(nd);
		
		while(!queue.isEmpty()) {
			
			Nods ns = queue.poll();
			
			if (ns.r == N-1 && ns.c == M-1) {
				return ns.step;
			}
			 
		}
		
		return 1;
	}
}
