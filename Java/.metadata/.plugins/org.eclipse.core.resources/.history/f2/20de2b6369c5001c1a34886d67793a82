package com.test.algorithm;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Comparator;
import java.util.PriorityQueue;

public class MazeMaked2665 {
	
	static class Node {
		int w,r,c;
		
		public Node(int w, int r, int c) {
			this.w  = w;
			this.r =  r;
			this.c = c;
		}
	}
	static int N;
	static int[][] matrix;
	static int[][] result;
	
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		N = Integer.parseInt(br.readLine());
		
		matrix = new int[N][N];
		result = new int[N][N];
		
		for (int i = 0; i < N; i++) {
			String[] inputs = br.readLine().split("");
			for (int j = 0; j < N; j++) {
				matrix[i][j] = Integer.parseInt(inputs[j]);
			}
		}
		
		dijkstra();
		
		
	}
	
	static void dijkstra() {
		PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {
			@Override
			public int compare(Node n1, Node n2) {
				
				if (n1.w > n2.w) return -1;
				else if (n2.w > n1.w) return 1;
				else return 0;
			}
		});
		
		pq.offer(new Node(0,0,0));
		result[0][0] = 0;
		
		while(!pq.isEmpty()) {
			int cur_w = pq.peek().w;
			
		}
		
	}

}
