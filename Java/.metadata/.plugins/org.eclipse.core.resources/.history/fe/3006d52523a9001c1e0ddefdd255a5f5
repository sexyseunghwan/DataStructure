package com.test.algorithm;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Stack;


public class Networking9694 {
	
	static ArrayList<ArrayList<Node>> map;
	static int[] visit;
	static int[] prev;
	static int T,N,M;
	static int INF = Integer.MAX_VALUE;
	
	static class Node {
		int r,w;
		
		public Node(int r, int w) {
			this.r = r;
			this.w = w;
		}
	}
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		T = Integer.parseInt(br.readLine());
		
		while(T-- > 0) {
			String[] inputs = br.readLine().split(" ");
			
			N = Integer.parseInt(inputs[0]);//관계의 개수
			M = Integer.parseInt(inputs[1]);//정치인의 수
			
			
		}
		

	
		
	}//main()
	
	static void dijkstra(int size, int step) {
		
		PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {
			@Override
			public int compare(Node n1, Node n2) {
				
				if (n1.w > n2.w) return -1;
				else if (n2.w > n1.w) return 1;
				else return 0;
			}
		});
		

	
		
		
	}//dijsktra()
	
	static void initiate() {
		
		for (int i = 0; i < map.length; i++) {
			visit[i] = INF;
			for (int j = 0; j < map[0].length; j++) {
				if (i == j) map[i][j] = 0;
				else map[i][j] = INF;
			}
		}
		
	}//initiate()
	
	

}
