package com.test.algorithm;

import java.io.*;

public class cabbage1012 {

	static int N, M, K;
	static int[][] matrix;
	static int[][] visit;
	static int count = 0;
	static int[] dx = { 0, 0, 1, -1 };
	static int[] dy = { 1, -1, 0, 0 };

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int cycle = Integer.parseInt(br.readLine());
		
		//System.out.println(cycle);
		StringBuffer sb = new StringBuffer();
		
		for (int i = 0; i < cycle; i++) {

			count = 0;
			String[] inputs = br.readLine().split(" ");

			N = Integer.parseInt(inputs[0]);
			M = Integer.parseInt(inputs[1]);
			K = Integer.parseInt(inputs[2]);

			matrix = new int[N][M];
			visit = new int[N][M];

			for (int j = 0; j < K; j++) {
				String[] coordinate = br.readLine().split(" ");
				int x = Integer.parseInt(coordinate[0]);
				int y = Integer.parseInt(coordinate[1]);

				matrix[x][y] = 1;
			} // for
			
			
//			for (int s = 0; s < N; s++) {
//				for (int k = 0; k < M; k++) {
//					System.out.print(matrix[s][k] + " ");
//				}
//				System.out.println();
//			}
			
			//System.out.println("===============");
			
			
			for (int j = 0; j < N; j++) {
				for (int s = 0; s < M; s++) {
					
					//System.out.println("j : " + j + " s : " + s + " " + visit[j][s]);
					System.out.println("===============");
//					for (int o = 0; o < N; o++) {
//						for (int k = 0; k < M; k++) {
//							System.out.print(visit[o][k] + " ");
//						}
//						System.out.println();
//					}
					
					
					if (matrix[j][s] == 1 && visit[j][s] == 0) {
						//System.out.println("in");
						dfs(j, s);
						
						//System.out.println("****j : " + j + " s : " + s + " " + visit[j][s]);
						
//						for (int k = 0; k < N; k++) {
//							for (int l = 0; l < M; l++) {
//								System.out.print("****k : " + k + " l : " + l + " " + visit[k][l] + " ");
//							}
//							System.out.println();
//						}
						
						
						count++;
					}
				}
			}
			
			sb.append(count + "\n");
		} // for

		System.out.println(sb.toString());
	}

	static void dfs(int x, int y) {
		
		//System.out.println("????");
		
		visit[x][y] = 1;

		//System.out.println("**************************");
//		for (int i = 0; i < N; i++) {
//			for (int k = 0; k < M; k++) {
//				System.out.print(visit[i][k] + " ");
//			}
//			System.out.println();
//		}
		
		
		for (int i = 0; i < 4; i++) {
			int newX = x + dx[i];
			int newY = y + dy[i];
			
			//System.out.println(newX + " : " + newY);
			if (newX < 0 || newY < 0 || newX >= N || newY >= M || matrix[newX][newY] == 0 || visit[newX][newY] == 1) {
				//System.out.println("무시");
				continue;
			}
			
			dfs(newX, newY);
		}
	}
}
