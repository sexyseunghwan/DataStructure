package com.test.algorithm;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

import com.test.algorithm.TestTestTest.Node;

public class Party1238 {
	
	static class Node {
		int e,w;
		
		public Node(int e, int w) {
			this.e = e;
			this.w = w;
		}
	}
	
	static int N,M,X;
	static ArrayList<ArrayList<Node>> map;
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		StringTokenizer stk = new StringTokenizer(br.readLine()," ");
		N = Integer.parseInt(stk.nextToken());
		M = Integer.parseInt(stk.nextToken());
		X = Integer.parseInt(stk.nextToken());
		
		map = new ArrayList<ArrayList<Node>>();
		
		for (int i = 0; i <= N; i++) {
			map.add(new ArrayList<>());
		}
		
		for (int i = 0; i < M; i++) {
			int s,e,w;
			stk = new StringTokenizer(br.readLine()," ");
			
			s = Integer.parseInt(stk.nextToken());
			e = Integer.parseInt(stk.nextToken());
			w = Integer.parseInt(stk.nextToken());
			
			map.get(s).add(new Node(e,w));
		}
		
		for (int i = 1; i <= N; i++) {
			if (i != X) {
				init();
				int goDist = dijkstra(i,X);
				int returnDist = dijkstra(X,i);
			}
		}
		
		
	}
	
	static int dijkstra(int start, int end) {
		PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {
			@Override
			public int compare(Node n1, Node n2) {
				
				if (n1.w > n2.w) return 1;
				else if (n2.w > n1.w) return -1;
				else return 0;
			}
		});
	}
	
	static void init() {
		
	}

}
