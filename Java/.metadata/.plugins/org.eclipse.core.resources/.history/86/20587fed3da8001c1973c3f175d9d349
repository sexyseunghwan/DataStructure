package com.test.algorithm;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Stack;


public class Networking9694 {
	
	static int[][] map;
	static int[] visit;
	static int[] prev;
	static int INF = 999999999;
	static StringBuffer sb = new StringBuffer();	
	
	static class Node {
		int r,w;
		
		public Node(int r, int w) {
			this.r = r;
			this.w = w;
		}
	}
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int cycle = Integer.parseInt(br.readLine());
		int step = 1;
		
		for (int i = 0; i < cycle; i++) {
			String[] inputs = br.readLine().split(" ");
			
			int N = Integer.parseInt(inputs[0]);//관계의 개수
			int M = Integer.parseInt(inputs[1]);//정치인의 수
			
			map = new int[M][M];
			visit = new int[M];
			prev = new int[M];
			initiate();
			
			for (int j = 0; j < N; j++) {
				String[] tests = br.readLine().split(" ");
				
				int mapR = Integer.parseInt(tests[0]);
				int mapC = Integer.parseInt(tests[1]);
				int visitE = Integer.parseInt(tests[2]);
				
				map[mapR][mapC] = visitE;
				map[mapC][mapR] = visitE;
				
			}
			
			dijkstra(M,step);
			
			step++;
			
		}
		
		bw.write(sb.toString() + "");
		bw.close();
		br.close();
		
	
		
	}//main()
	
	static void dijkstra(int size, int step) {
		
		PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {
			@Override
			public int compare(Node n1, Node n2) {
				
				if (n1.w > n2.w) return -1;
				else if (n2.w > n1.w) return 1;
				else return 0;
			}
		});
		
		
		
		visit[0] = map[0][0];
		pq.offer(new Node(0,-map[0][0]));
		
		while(!pq.isEmpty()) {
			Node nd = pq.poll();
			
			int current = nd.r;
			int w  = -nd.w;
			
			if (visit[current] < w) continue;
			
			for (int i = 0; i < size; i++) {
				int nextWeight = w + map[current][i];
				
				if (visit[i] > nextWeight) {
					visit[i] = nextWeight;
					prev[i] = current;
					pq.offer(new Node(i,-nextWeight));
				}
			}//for
		}
		
		if (visit[size-1] == INF) {
			sb.append( "Case #" + step + ": -1");
		} else {
			Stack<Integer> stack = new Stack<Integer>();
			
			for (int i = size-1 ; i > 0;) {
				stack.push(i = prev[i]);
			}
			sb.append("Case #" + step + ":");
			
			while(!stack.empty()) {
				sb.append(" " + stack.pop());
			}
			sb.append(" ");
			sb.append(size-1);

		}
		
		sb.append("\n");
		
		
	}//dijsktra()
	
	static void initiate() {
		
		for (int i = 0; i < map.length; i++) {
			visit[i] = INF;
			for (int j = 0; j < map[0].length; j++) {
				if (i == j) map[i][j] = 0;
				else map[i][j] = INF;
			}
		}
		
	}//initiate()
	
	

}
